#include <iostream>
#include <iomanip>
#include <unistd.h>
#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/err.h>
#include <stdint.h>



int main()
{
	BIGNUM *p, *g, *q, *pub_key, *priv_key, *B;
   	p = BN_new();
	g = BN_new();
	q = BN_new();
	pub_key = BN_new();
	priv_key = BN_new();
	B = BN_new();

	const char *cp = "00c988d06ccd826a9351d5cae32a47b28ecc90fa4870d861ccc058cfa49419b0044a395e3f289a48c821b2efe08d293b917b1db2e2369564f5d066084f71a090706f84e101625cacaaecfff3b2fe2a8c04ff9a14d43e9b316576f1571b0fdd51a119222601ae2bbfc3007fbc12d10a2d725ad9d8503a47b4b1977faf4b0c8e244c372662a335c82380718abaa9b522a03866ebfc6dd7dee135a54fdce58eaaf1996d2485e178888f361b01c2a5f5e21e65baffe3024c02210af189975cade7bfead4a90401d7e37d9b855fa8c8f0d2fbff9357f8c05e3a2a14173e8f7555fd78b88ecedc94e238639fa1f59c896f61501b2094199d7679805fb69026d4f13cdeb60caa339beb091d7d0c125c72028fdfec35c5d6ee231b1a46c0619bf822f415121a975322001c4edc29c5caa430d1471d1013b67b90f5a7fafb322b53a9c4d418763cb8a9dd068bf3b7702ba939b4fb0da5253a999b5a8dfa664d2a9f94169f34e46d45d348e3a7e3424cf6019cfdfe1623940b3fc47a1064e601549c02020571fa10f63aeb0676213cd71d1a8a4140662d00471fe9ba88c269f8d217a978ae910a85cadca772bd7023dc8d0c2ed524c7feefedf408e4221f474a3783545e155118133fa9d65382f7261cf001701e46721021a1315780a53f4238c1aeea41d38e1b3310d2ec9ae97c2677467157a0b74da93a3cdf3e6cf898fa0f5cdf3f55ca572385698fd0f55e0e5c63b4bcb9f4a6edb74c02c0150b057b1a903f7dd8efc011ee822f2ecbb780914bcc43a11f7bf4a63be31f06226881ade9ea780a58c1a6d7183ee947611a03051a0ea817d6d26fc0c418607eef57ae00494cdda1cb518c3f910fd46c65f96e3553ceffd72d13ac13904eff4e66203b8d512bf7136251120f0bd28c1e781000bbf832a072db3bba7b2cfb5ab1f6daa17fd6ea6c484bb764e5f01194a5445b1fd435977f916261fa1b5aad6b7e83782c04ebf3cbd11dc7d929ffd8a16597e2d6a384f343d08e13cea8232818d7f989bb4b0d7d7531af0f4c6683356a109eafd135d2e3319ffa6218053ec737fbd91d5886790d4fb1db70f3d704148eff2faa0241f47f2902ea8286bd7647b615197b0e2a70f3638bdf46973518ea692da5ee26e533f815fa5e5835c2080fac1776a7ccfe2f49b1400a55f24c9fc465a766772efb35756aabf0a42b58966e883afe5e4000d863756225cdda2f5ac06093173a1afb5ad9a7b721a30820170a4ae35b3a2f09de1b53b7d7a407e0f77f1cd4201337315e6677d30ca3e40f84a7ad707be0ff99ce9334fae40692f38135dbbc8ce8e7604c0f9c8ae1989c9fe2ac29c2800dc8876032b416e5a3aa83";
	const char *cg = "02";
	const char *cpriv = "AB425D1039BF51103185898A06E5F5A0774EBC8ADDDEAA5EEDCD1C197F9A281C33ECAD4CDDFA603158E51EB0A0DD1CC0E77654EE840F632488F1C3F5FFA05D9D06DD87C30512FC811A9DC162732E87C196A52798C3B9F44DDFAF7AF21E6228DFAC7DF315BB904651FE97FEFD4E8EB0019E19981311A20B0F8239E0036B91D61FB7B3D795282AF8B33678E9220E00528D5216633FB7F1A1F0592557767E067D9DB72F4AFD1F34D5D873B318C84AF34D617CF6BF9E9935D32CA02B65D6DC967E3418A0252483A65BEC817A7AB3C46CA38E86E552DDF3177EC6EB9358AD60E1DE35C11ABD0DCCAB920D3D281C313F0CEC234517F03EFFF34E42D920A7BAA118AEBAC00F06B7FC2CE634AD8AF0E40CE45E9CD94185FD2FE10D102481FA872F4824E55CEF59F256A2DDC29FC5491856FC381501A479616DF484EE2A61CF6DEDF82A07316BDA0DB97D2BB06AE446B387C1ED9111165CEA9F08E3A3E8B99E7F198573E0A447A0839F2BECBF6031E32D19B7FCEE728FCF33F92CD69055DBF05AA38B026BAE5380D1853A99273D4E11C8C7C3743D11AC5B269D771CE8F45C4EE326C295B53AB08F8D4DA0907E11CB28175B98105C4B75FCCDE89F3DB022F3E4F5AD55EB7B4D71DEE71A4A9208E2924A6097E6BA3D9E9EE8243A24757AA03264DD7FB807C9B62CA0BEC888A5DECFCE7554415A29189C44169A253268D2E5FEAD72AED23272C446B4C223D743BAA5A2D9AD4EAFB99E07902BA845DFA72CBB3DFCA3FEC890086910168E9E92B38416C772CBAD5AA5C8CE3B5855E3BC14ED3125CD84144E48A1BE187AE236114F789E0D11651991BC9B94A848CE38ACEC559D0B496CD10B97B41B60E7834253932163EF83C9815DC4D976701A1BA9F3B6CC90DF2888924E22DFD318E46289779599C17A01937CD52D5F3A6A6B55E72C7BC3F05E54439A4C7517E04A68C8AEC2DA2931A52C7F7953C5C46A99ED68184F9FE421A997771A7A00DCBE6278124F2166CA08C24FDE20701A9446270A9CC525FF94813090A2FECA2203C76B636A5204F00534FB6400FAC03AD3D42EE2DD031D2DA1FAFC7879CE02A8724F262FA55C01BB34599525969B33CC7C8901FB40C3F643F29B33B1424A4A2917C568C2CFD38CF21C7ECD94F825F22B3610B1C20D03DA95D9B67FC3128F68AC795B6118AD7D613AB7BA871221BBD628E7751E5EDE96A46D8D3CB85777779BCF3C19F03102CA18022507C51D0F247BA13EB180B5DAD8FA48E7849554BD57861935FDAC2F55C66EFA9B02829027BF2B93ED484C1AE0343C9C340CED80DA36B5CA2781919BAA00DD63DD0A4EAE9CF41086193973E2C0C2B2DB530F0EF6B51666E329";
	int status;
    status = BN_hex2bn(&p, cp);
	std::cout<<status<<std::endl;
	
	status = BN_hex2bn(&g, cg);
	std::cout<<status << std::endl;

	//status = BN_dec2bn(&priv_key, cpriv);
	//std::cout<<status << std::endl;

	//status = BN_dec2bn(&B, "10");
	//std::cout<<status << std::endl;
	
	DH *dh = DH_new();
	DH_set0_pqg(dh, p, NULL, g);
	//DH_set0_key(dh, NULL, priv_key);
	status = DH_generate_key(dh);
	std::cout<<status<<std::endl;
	/*uint8_t *ptr = new uint8_t[256];
	int ssize = DH_compute_key(ptr, B, dh);
	for(int i=0;i<ssize;i++)
	{

		std::cout<<"numbero: "<<std::dec<<std::setfill('0')<<static_cast<uint16_t>(ptr[i]) << " ";
		//if(i%8 == 0 && i%16 != 0) std::cout<<"  ";
		//if(i%16 == 0) std::cout<<std::endl;
	}
	std::cout<<std::endl;

	delete[] ptr;
	if(status == 0)
	{
		unsigned long err = ERR_get_error();
		char *buf = new char[512];
		ERR_error_string(err, buf);
		std::cout<<buf<<std::endl;
		delete[] buf;
	}*/
	DH_get0_key(dh, const_cast<const BIGNUM**>(&pub_key), const_cast<const BIGNUM**>(&priv_key));
	//DH_get0_pqg(dh, const_cast<const BIGNUM**>(&p), const_cast<const BIGNUM**>(&q), const_cast<const BIGNUM**>(&g));
	//int q_size = BN_num_bytes(q);
	int pub_size = BN_num_bytes(pub_key);
	
	const char *pub = new char[pub_size];
	//const char *q_s = new char[q_size];

	pub = BN_bn2hex(pub_key);
	//q_s = BN_bn2hex(q);

	printf("%s \n", pub);
	//printf("%s \n", q_s);
	delete[] pub;
	//delete[] q_s;

	//std::cout<<std::endl;



	//BIGNUM *priv_key = dh->priv_key;


	//DH_free(dh);
	//BN_free(p);
	//BN_free(g);
	//BN_free(pub_key);
	//BN_free(priv_key);

	
	

    return 0;
}
