#include <iostream>
#include <iomanip>
#include "socket_sources/socket_class.h"
#include "host.h"
#include "ssh_packets/protocol_exchange.h"
#include "ssh_packets/key_exchange_init.h"
#include <unistd.h>
#include <openssl/bn.h>
#include <openssl/dh.h>

int main()
{
    SocketClass sc("0.0.0.0", 22);
	sc.connect();
	sc.send(protocol_exchange.getFrame());
	sc.recv();
	sc.send(Host::payload_from_hex(""));
	//sc.send(key_exchange_init.getFrame());

	sc.send(Host::payload_from_hex(
				"000002340614f655be72054e57a48c444cd3e60167820000002f6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d7368613235362c6578742d696e666f2d630000016665636473612d736861322d6e697374703235362d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703338342d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703532312d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703235362c65636473612d736861322d6e697374703338342c65636473612d736861322d6e697374703532312c7373682d656432353531392d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3531322d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3235362d636572742d763031406f70656e7373682e636f6d2c7373682d7273612d636572742d763031406f70656e7373682e636f6d2c7373682d656432353531392c7273612d736861322d3531322c7273612d736861322d3235362c7373682d7273610000000a6165733132382d6374720000000a6165733132382d63747200000009686d61632d7368613100000009686d61632d736861310000001a6e6f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c69620000001a6e6f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c696200000000000000000000000000000000000000"
				));
	sc.recv();
	sc.send(Host::payload_from_hex(
			"0000001406220000080000001e0000002000000000000000"	
				));
	const auto vec = sc.recv();
	std::string recv = Host::vector_to_string(vec);
	std::string modulus = recv.substr(20, 961*2);
	std::string base = recv.substr(20 + 961*2 + 8, 2 );

	

	
	/*for(const uint8_t byte: modulus)
	{
		std::cout<<std::hex<<std::setfill('0')<<static_cast<int>(byte);
	}
	std::cout<<std::endl;
	std::cout<<std::endl;
	for(const uint8_t byte: base)
	{
		std::cout<<std::hex<<std::setfill('0')<<static_cast<int>(byte);
	}
	std::cout<<std::endl;
	std::cout<<std::endl;*/

    return 0;
}
